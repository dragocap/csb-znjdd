{"version":3,"sources":["CandyMachine/index.js","CountdownTimer/index.js","assets/twitter-logo.svg","App.js","index.js","CandyMachine/helpers.js"],"names":["programs","metadata","Metadata","MetadataProgram","config","web3","PublicKey","process","REACT_APP_CANDY_MACHINE_CONFIG","SystemProgram","opts","CandyMachine","walletAddress","useState","machineStats","setMachineStats","mints","setMints","isMinting","setIsMinting","isLoadingMints","setIsLoadingMints","fetchHashTable","hash","metadataEnabled","a","connection","Connection","REACT_APP_SOLANA_RPC_HOST","getProgramAccounts","filters","memcmp","offset","bytes","metadataAccounts","mintHashes","index","length","account","getParsedAccountInfo","pubkey","accountInfo","toString","value","push","data","mint","getMetadata","findProgramAddress","Buffer","from","TOKEN_METADATA_PROGRAM_ID","toBuffer","getMasterEdition","getTokenWallet","wallet","TOKEN_PROGRAM_ID","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","mintToken","Keypair","generate","publicKey","token","masterEdition","rpcHost","getMinimumBalanceForRentExemption","MintLayout","span","rent","accounts","candyMachine","REACT_APP_CANDY_MACHINE_ID","payer","REACT_APP_TREASURY_ADDRESS","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","programId","SYSVAR_RENT_PUBKEY","clock","SYSVAR_CLOCK_PUBKEY","signers","instructions","createAccount","fromPubkey","newAccountPubkey","space","lamports","Token","createInitMintInstruction","createAssociatedTokenAccountInstruction","createMintToInstruction","provider","getProvider","Program","fetchIdl","candyMachineProgram","idl","program","rpc","mintNft","txn","console","log","onSignatureWithOptions","notification","context","type","result","err","commitment","message","msg","code","indexOf","warn","associatedTokenAddress","splTokenMintAddress","keys","isSigner","isWritable","TransactionInstruction","Provider","window","solana","getCandyMachineState","fetch","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","goLiveData","goLiveDate","goLiveDateTimeString","Date","toGMTString","minted","uri","response","json","parsed","name","image","collection","find","prevState","useEffect","className","currentDate","dropDate","renderDropTimer","onClick","disabled","map","src","alt","CountdownTimer","timerString","setTimerString","interval","setInterval","getTime","distance","days","Math","floor","hours","minutes","seconds","clearInterval","TWITTER_HANDLE","TWITTER_LINK","App","setWalletAddress","checkIfWalletIsConnected","isPhantom","connect","onlyIfTrusted","alert","connectWallet","onLoad","addEventListener","removeEventListener","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d8f5b46b.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\nimport { programs } from '@metaplex/js';\nimport './CandyMachine.css';\nimport {\n  candyMachineProgram,\n  TOKEN_METADATA_PROGRAM_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n} from './helpers';\nimport CountdownTimer from '../CountdownTimer';\nconst {\n  metadata: { Metadata, MetadataProgram },\n} = programs;\n\nconst config = new web3.PublicKey(process.env.REACT_APP_CANDY_MACHINE_CONFIG);\nconst { SystemProgram } = web3;\nconst opts = {\n  preflightCommitment: 'processed',\n};\n\nconst MAX_NAME_LENGTH = 32;\nconst MAX_URI_LENGTH = 200;\nconst MAX_SYMBOL_LENGTH = 10;\nconst MAX_CREATOR_LEN = 32 + 1 + 1;\n\nconst CandyMachine = ({ walletAddress }) => {\n\n  const [machineStats, setMachineStats] = useState(null);\n  const [mints, setMints] = useState([]);\n  const [isMinting, setIsMinting] = useState(false);\n  const [isLoadingMints, setIsLoadingMints] = useState(false);\n\n  // Actions\n  const fetchHashTable = async (hash, metadataEnabled) => {\n    const connection = new web3.Connection(\n      process.env.REACT_APP_SOLANA_RPC_HOST\n    );\n\n    const metadataAccounts = await MetadataProgram.getProgramAccounts(\n      connection,\n      {\n        filters: [\n          {\n            memcmp: {\n              offset:\n                1 +\n                32 +\n                32 +\n                4 +\n                MAX_NAME_LENGTH +\n                4 +\n                MAX_URI_LENGTH +\n                4 +\n                MAX_SYMBOL_LENGTH +\n                2 +\n                1 +\n                4 +\n                0 * MAX_CREATOR_LEN,\n              bytes: hash,\n            },\n          },\n        ],\n      }\n    );\n\n    const mintHashes = [];\n\n    for (let index = 0; index < metadataAccounts.length; index++) {\n      const account = metadataAccounts[index];\n      const accountInfo = await connection.getParsedAccountInfo(account.pubkey);\n      const metadata = new Metadata(hash.toString(), accountInfo.value);\n      if (metadataEnabled) mintHashes.push(metadata.data);\n      else mintHashes.push(metadata.data.mint);\n    }\n\n    return mintHashes;\n  };\n\n  const getMetadata = async (mint) => {\n    return (\n      await PublicKey.findProgramAddress(\n        [\n          Buffer.from('metadata'),\n          TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n          mint.toBuffer(),\n        ],\n        TOKEN_METADATA_PROGRAM_ID\n      )\n    )[0];\n  };\n\n  const getMasterEdition = async (mint) => {\n    return (\n      await PublicKey.findProgramAddress(\n        [\n          Buffer.from('metadata'),\n          TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n          mint.toBuffer(),\n          Buffer.from('edition'),\n        ],\n        TOKEN_METADATA_PROGRAM_ID\n      )\n    )[0];\n  };\n\n  const getTokenWallet = async (wallet, mint) => {\n    return (\n      await web3.PublicKey.findProgramAddress(\n        [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n        SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n      )\n    )[0];\n  };\n\n  const mintToken = async () => {\n    try {\n      setIsMinting(true);\n      const mint = web3.Keypair.generate();\n      const token = await getTokenWallet(\n        walletAddress.publicKey,\n        mint.publicKey\n      );\n      const metadata = await getMetadata(mint.publicKey);\n      const masterEdition = await getMasterEdition(mint.publicKey);\n      const rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST;\n      const connection = new Connection(rpcHost);\n      const rent = await connection.getMinimumBalanceForRentExemption(\n        MintLayout.span\n      );\n\n      const accounts = {\n        config,\n        candyMachine: process.env.REACT_APP_CANDY_MACHINE_ID,\n        payer: walletAddress.publicKey,\n        wallet: process.env.REACT_APP_TREASURY_ADDRESS,\n        mint: mint.publicKey,\n        metadata,\n        masterEdition,\n        mintAuthority: walletAddress.publicKey,\n        updateAuthority: walletAddress.publicKey,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: web3.SYSVAR_RENT_PUBKEY,\n        clock: web3.SYSVAR_CLOCK_PUBKEY,\n      };\n\n      const signers = [mint];\n      const instructions = [\n        web3.SystemProgram.createAccount({\n          fromPubkey: walletAddress.publicKey,\n          newAccountPubkey: mint.publicKey,\n          space: MintLayout.span,\n          lamports: rent,\n          programId: TOKEN_PROGRAM_ID,\n        }),\n        Token.createInitMintInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          0,\n          walletAddress.publicKey,\n          walletAddress.publicKey\n        ),\n        createAssociatedTokenAccountInstruction(\n          token,\n          walletAddress.publicKey,\n          walletAddress.publicKey,\n          mint.publicKey\n        ),\n        Token.createMintToInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          token,\n          walletAddress.publicKey,\n          [],\n          1\n        ),\n      ];\n\n      const provider = getProvider();\n      const idl = await Program.fetchIdl(candyMachineProgram, provider);\n      const program = new Program(idl, candyMachineProgram, provider);\n\n      const txn = await program.rpc.mintNft({\n        accounts,\n        signers,\n        instructions,\n      });\n\n      console.log('txn:', txn);\n\n      // Setup listener\n      connection.onSignatureWithOptions(\n        txn,\n        async (notification, context) => {\n          if (notification.type === 'status') {\n            console.log('Receievd status event');\n\n            const { result } = notification;\n            if (!result.err) {\n              console.log('NFT Minted!');\n              setIsMinting(false);\n            }\n          }\n        },\n        { commitment: 'processed' }\n      );\n    } catch (error) {\n      let message = error.msg || 'Minting failed! Please try again!';\n      setIsMinting(false);\n      if (!error.msg) {\n        if (error.message.indexOf('0x138')) {\n        } else if (error.message.indexOf('0x137')) {\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf('0x135')) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`;\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      console.warn(message);\n    }\n\n\n  };\n\n  const createAssociatedTokenAccountInstruction = (\n    associatedTokenAddress,\n    payer,\n    walletAddress,\n    splTokenMintAddress\n  ) => {\n    const keys = [\n      { pubkey: payer, isSigner: true, isWritable: true },\n      { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n      { pubkey: walletAddress, isSigner: false, isWritable: false },\n      { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n      {\n        pubkey: web3.SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      {\n        pubkey: web3.SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n    return new web3.TransactionInstruction({\n      keys,\n      programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n      data: Buffer.from([]),\n    });\n  };\n\n  const getProvider = () => {\n\n    const rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST;\n\n    // creates a new connection object\n    const connection = new Connection(rpcHost);\n\n    // creates a new solana provider object\n    const provider = new Provider(connection, window.solana, opts.preflightCommitment);\n\n    return provider;\n  }\n\n  const getCandyMachineState = async () => {\n    const provider = getProvider();\n\n    // get metadata about the your deployed candy machine program\n    const idl = await Program.fetchIdl(candyMachineProgram, provider);\n\n    // create a new program object from the idl\n    const program = new Program(idl, candyMachineProgram, provider);\n\n    // fetch the metadata for the candy machine program\n    const candyMachine = await program.account.candyMachine.fetch(process.env.REACT_APP_CANDY_MACHINE_ID);\n\n    // parse all the metadata of the candy machine program\n    const itemsAvailable = candyMachine.data.itemsAvailable.toNumber();\n    const itemsRedeemed = candyMachine.itemsRedeemed.toNumber();\n    const itemsRemaining = itemsAvailable - itemsRedeemed;\n    const goLiveData = candyMachine.data.goLiveDate.toNumber();\n\n    const goLiveDateTimeString = `${new Date(goLiveData * 1000).toGMTString()}`;\n    setMachineStats({\n      itemsAvailable, itemsRedeemed, itemsRemaining, goLiveData, goLiveDateTimeString\n    });\n    console.log({\n      itemsAvailable, itemsRedeemed, itemsRemaining, goLiveData, goLiveDateTimeString\n    });\n\n    setIsLoadingMints(true);\n    const data = await fetchHashTable(process.env.REACT_APP_CANDY_MACHINE_ID, true);\n\n    if (data.length !== 0) {\n      for (const minted of data) {\n        // get URI\n\n        const response = await fetch(minted.data.uri);\n        const parsed = await response.json();\n        console.log(`Past Minted NFT`, parsed);\n        const { name, image, collection } = parsed;\n        if (!mints.find(mint => mint.image === image)) {\n          setMints((prevState) => [...prevState, { name, image, collection }]);\n        }\n      }\n    }\n    setIsLoadingMints(false);\n  }\n\n  const renderMintedItems = () => (\n    <div className=\"gif-container\">\n      <p className=\"sub-text\">Minted Items ✨</p>\n      <div className=\"gif-grid\">\n        {mints.map((mint) => (\n          <div className=\"gif-item\" key={mint.name}>\n            <img src={mint.image} alt={`Minted NFT ${mint.name}`} />\n            <p>{mint.name}</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n\n  const renderDropTimer = () => {\n    // Get the current date and dropDate in a JavaScript Date object\n    const currentDate = new Date();\n    const dropDate = new Date(machineStats.goLiveData * 1000);\n\n    // If currentDate is before dropDate, render our Countdown component\n    if (currentDate < dropDate) {\n      console.log('Before drop date!');\n      // Don't forget to pass over your dropDate!\n      return <CountdownTimer dropDate={dropDate} />;\n    } else {\n      console.log('After drop date!');\n    }\n\n    // Else let's just return the current drop date\n    return <p>{`Drop Date: ${machineStats.goLiveDateTimeString}`}</p>;\n  };\n\n\n  useEffect(() => {\n    getCandyMachineState()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return (\n    machineStats && (\n      <div className=\"machine-container\">\n        {/* Add this at the beginning of our component */}\n        {renderDropTimer()}\n        <p>{`Items Minted: ${machineStats.itemsRedeemed} / ${machineStats.itemsAvailable}`}</p>\n        {/* Check to see if these properties are equal! */}\n        {machineStats.itemsRedeemed === machineStats.itemsAvailable ? (\n          <p className=\"sub-text\">Sold Out 🙊</p>\n        ) : (\n          <button\n            className=\"cta-button mint-button\"\n            onClick={mintToken}\n            disabled={isMinting}\n          >\n            Mint NFT\n          </button>\n        )}\n        {isLoadingMints && <p>LOADING MINTS...</p>}\n        {/* If we have mints available in our array, let's render some items */}\n        {mints.length > 0 && renderMintedItems()}\n      </div>\n    )\n  );\n};\n\nexport default CandyMachine;\n","import React, { useEffect, useState } from 'react';\nimport './CountdownTimer.css';\n\nconst CountdownTimer = ({ dropDate }) => {\n  // State\n  const [timerString, setTimerString] = useState('');\n\n  // Our useEffect will run on component load\n  useEffect(() => {\n    console.log('Setting interval...');\n\n    // Use setInterval to run this piece of code every second\n    const interval = setInterval(() => {\n      const currentDate = new Date().getTime();\n      const distance = dropDate - currentDate;\n\n      // Here it's as easy as doing some time math to get the different properties\n      const days = Math.floor(distance / (1000 * 60 * 60 * 24));\n      const hours = Math.floor(\n        (distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n      );\n      const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n      const seconds = Math.floor((distance % (1000 * 60)) / 1000);\n\n      // We have our desired output, set it in state!\n      setTimerString(`${days}d ${hours}h ${minutes}m ${seconds}s`);\n\n      // If our distance passes zero this means that it's drop time!\n      if (distance < 0) {\n        console.log('Clearing interval...');\n        clearInterval(interval);\n      }\n    }, 1000);\n\n    // Anytime our component unmounts let's clean up our interval\n    return () => {\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div className=\"timer-container\">\n      <p className=\"timer-header\">Candy Drop Starting In</p>\n      {timerString && <p className=\"timer-value\">{`⏰ ${timerString}`}</p>}\n    </div>\n  );\n};\n\nexport default CountdownTimer;\n","export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport CandyMachine from './CandyMachine';\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n\n  const [walletAddress, setWalletAddress] = useState(null);\n\n  const checkIfWalletIsConnected = async () => {\n    const { solana } = window;\n    if (solana) {\n      if (solana.isPhantom) {\n        console.log('Phantom Wallet found');\n        const response = await solana.connect({ onlyIfTrusted: true });\n        console.log('Connected with Public Key:', response.publicKey.toString());\n        // set the wallet address on the state variable\n        setWalletAddress(response.publicKey.toString());\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet 👻');\n      }\n    } else {\n      alert('Please connect to your wallet');\n    }\n  }\n\n  const connectWallet = async () => {\n    const { solana } = window;\n    if (solana) {\n      if (solana.isPhantom) {\n        console.log('Phantom Wallet found');\n        const response = await solana.connect();\n        console.log('Connected with Public Key:', response.publicKey.toString());\n        // set the wallet address on the state variable\n        setWalletAddress(response.publicKey.toString());\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet 👻');\n      }\n    } else {\n      alert('Please connect to your wallet');\n    }\n  }\n\n  const renderNotConnected = () => (<button\n    className=\"cta-button connect-wallet-button\"\n    onClick={connectWallet}\n  >\n    Connect to Wallet\n  </button>)\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header\">🍭 Candy Drop</p>\n          <p className=\"sub-text\">NFT drop machine with fair mint</p>\n          {!walletAddress && renderNotConnected()}\n        </div>\n        {walletAddress && <CandyMachine walletAddress={window.solana} />}\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import { web3 } from '@project-serum/anchor';\n\n// CLI Properties Given to us\nconst candyMachineProgram = new web3.PublicKey(\n  'cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ'\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new web3.PublicKey(\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'\n);\n\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new web3.PublicKey(\n  'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'\n);\nexport {\n  candyMachineProgram,\n  TOKEN_METADATA_PROGRAM_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n};\n"],"sourceRoot":""}